Microsoft (R) Macro Assembler Version 14.28.29914.0	    06/06/21 01:18:44
#Program Template     (template.asm			     Page 1 - 1


				TITLE Program Template     (template.asm)

				; Author: 
				; Last Modified:
				; OSU email address: ONID_ID@oregonstate.edu
				; Course number/section:   CS271 Section ???
				; Project Number:                 Due Date:
				; Description: This file is provided as a template from which you may work
				;              when developing assembly projects in CS271.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; (insert macro definitions here)
				mGetString MACRO buffer, usrInput, usrInputCount, usrInputLen
					push	EDX
					push	ECX
					push	EAX

					mov		EDX, buffer
					call	WriteString
					mov		EDX, usrInput
					mov		ECX, usrInputCount
					call	ReadString
					mov		userInputLen, EAX

					pop		EAX
					pop		ECX
					pop		EDX
				ENDM

				mDisplayString MACRO display_string
					push	EDX

					mov		EDX, display_string
					call	WriteString

					pop		EDX
				ENDM

				; (insert constant definitions here)

 =-80000000			LO			 = -2147483648
 = 7FFFFFFF			HI			 = 2147483647
 = 00000030			LO_NUM_ASCII = 48
 = 00000039			HI_NUM_ASCII = 57
 = 0000002B			POS_ASCII	 = 43
 = 0000002D			NEG_ASCII	 = 45
 = 00000020			SPACE_ASCII	 = 32
 = 0000000B			MAX_USER_INPUT_SIZE = 11
 = 00000000			NULL_BIT	=	0


 00000000			.data

 00000000 50 52 4F 4A 45	intro1				BYTE		"PROJECT 6: String Primitives and Macros by Adam Okasha",13,10,0
	   43 54 20 36 3A
	   20 53 74 72 69
	   6E 67 20 50 72
	   69 6D 69 74 69
	   76 65 73 20 61
	   6E 64 20 4D 61
	   63 72 6F 73 20
	   62 79 20 41 64
	   61 6D 20 4F 6B
	   61 73 68 61 0D
	   0A 00
 00000039 50 6C 65 61 73	intro2				BYTE		"Please input 10 signed decimal integers that can fit inside a 32 bit register.",13,10,
	   65 20 69 6E 70
	   75 74 20 31 30
	   20 73 69 67 6E
	   65 64 20 64 65
	   63 69 6D 61 6C
	   20 69 6E 74 65
	   67 65 72 73 20
	   74 68 61 74 20
	   63 61 6E 20 66
	   69 74 20 69 6E
	   73 69 64 65 20
	   61 20 33 32 20
	   62 69 74 20 72
	   65 67 69 73 74
	   65 72 2E 0D 0A
	   54 68 65 20 70
	   72 6F 67 72 61
	   6D 20 77 69 6C
	   6C 20 74 68 65
	   6E 20 64 69 73
	   70 6C 61 79 20
	   74 68 65 20 69
	   6E 74 65 67 65
	   72 73 2C 20 74
	   68 65 69 72 20
	   73 75 6D 2C 20
	   61 6E 64 20 74
	   68 65 20 61 76
	   65 72 61 67 65
	   2E 0D 0A 00
												"The program will then display the integers, their sum, and the average.",13,10,0
 000000D3 50 6C 65 61 73	prompt				BYTE		"Please enter a signed integer: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 69 6E 74
	   65 67 65 72 3A
	   20 00
 000000F3 54 68 65 20 6E	numbersEnteredMsg	BYTE		"The numbers you entered are:",0
	   75 6D 62 65 72
	   73 20 79 6F 75
	   20 65 6E 74 65
	   72 65 64 20 61
	   72 65 3A 00
 00000110 54 68 65 20 73	sumDisplayMsg		BYTE		"The sum is:     ",0
	   75 6D 20 69 73
	   3A 20 20 20 20
	   20 00
 00000121 54 68 65 20 61	avgDisplayMsg		BYTE		"The average is: ",0
	   76 65 72 61 67
	   65 20 69 73 3A
	   20 00
 00000132 47 6F 6F 64 62	goodByeMsg			BYTE		"Goodbye!",0
	   79 65 21 00
 0000013B			userInput			BYTE		MAX_USER_INPUT_SIZE DUP(?)
 00000146 00000000		userInputLen		DWORD		?
 0000014A 00000000		userNum				SDWORD		?
 0000014E			userNums			SDWORD		10 DUP(?)
 00000176 54 68 65 20 6E	errorMsg			BYTE		"The number you entered is invalid. Try again.",0
	   75 6D 62 65 72
	   20 79 6F 75 20
	   65 6E 74 65 72
	   65 64 20 69 73
	   20 69 6E 76 61
	   6C 69 64 2E 20
	   54 72 79 20 61
	   67 61 69 6E 2E
	   00
 000001A4 00000000		setNegative			DWORD		0
 000001A8 FFFFFF99		testInt				SDWORD		-103
 000001AC FFFFFF99		testArr				SDWORD		-103, -109, 110, -2000, 2000, -1, 0, 89, 101, 99
	   FFFFFF93
	   0000006E
	   FFFFF830
	   000007D0
	   FFFFFFFF
	   00000000
	   00000059
	   00000065
	   00000063
 000001D4  00000001 [		outString			BYTE		1 DUP(?)
	    00
	   ]


 00000000			.code
 00000000			main PROC

					mDisplayString	OFFSET intro1
 00000000  52		     1		push	EDX
 00000001  BA 00000000 R     1		mov		EDX, OFFSET intro1
 00000006  E8 00000000 E     1		call	WriteString
 0000000B  5A		     1		pop		EDX

 0000000C  E8 00000000 E		call	Crlf

					mDisplayString  OFFSET intro2
 00000011  52		     1		push	EDX
 00000012  BA 00000039 R     1		mov		EDX, OFFSET intro2
 00000017  E8 00000000 E     1		call	WriteString
 0000001C  5A		     1		pop		EDX

 0000001D  E8 00000000 E		call	Crlf
					
 00000022  68 0000014E R		push	OFFSET userNums
 00000027  68 000001A4 R		push	OFFSET setNegative
 0000002C  68 00000176 R		push	OFFSET errorMsg
 00000031  68 000000D3 R		push	OFFSET prompt
 00000036  68 0000013B R		push	OFFSET userInput
 0000003B  68 00000146 R		push	OFFSET userInputLen
 00000040  E8 00000060			call	ReadVal

 00000045  E8 00000000 E		call	Crlf

					;push	OFFSET outString
					;push	testInt
					;call	WriteVal
					mDisplayString OFFSET numbersEnteredMsg
 0000004A  52		     1		push	EDX
 0000004B  BA 000000F3 R     1		mov		EDX, OFFSET numbersEnteredMsg
 00000050  E8 00000000 E     1		call	WriteString
 00000055  5A		     1		pop		EDX
 00000056  E8 00000000 E		call	Crlf

 0000005B  68 000001D4 R		push	OFFSET outString
 00000060  68 0000014E R		push	OFFSET userNums
 00000065  E8 00000159			call	DisplayNumbers

 0000006A  E8 00000000 E		call	Crlf
 0000006F  E8 00000000 E		call	Crlf

					;push	OFFSET outString
					;push	OFFSET testArr
					;call	DisplayAverage

 00000074  68 00000121 R		push	OFFSET avgDisplayMsg
 00000079  68 00000110 R		push	OFFSET sumDisplayMsg
 0000007E  68 000001D4 R		push	OFFSET outString
 00000083  68 0000014E R		push	OFFSET userNums
 00000088  E8 00000155			call	DisplayAverage

 0000008D  E8 00000000 E		call	Crlf

					mDisplayString OFFSET goodByeMsg
 00000092  52		     1		push	EDX
 00000093  BA 00000132 R     1		mov		EDX, OFFSET goodByeMsg
 00000098  E8 00000000 E     1		call	WriteString
 0000009D  5A		     1		pop		EDX

					Invoke ExitProcess,0	; exit to operating system
 0000009E  6A 00	   *	    push   +000000000h
 000000A0  E8 00000000 E   *	    call   ExitProcess
 000000A5			main ENDP

				; (insert additional procedures here)

 000000A5			ReadVal PROC
 000000A5  55				push	EBP
 000000A6  8B EC			mov		EBP, ESP

 000000A8  B9 0000000A			mov		ECX, MAX_USER_INPUT_SIZE - 1	; sub 1 for sign when using as counter
 000000AD  8B 7D 1C			mov		EDI, [EBP + 28]	

 000000B0				_prompt:
 000000B0  51					push	ECX
						mGetString		[EBP + 16], [EBP + 12], MAX_USER_INPUT_SIZE, [EBP + 8]
 000000B1  52		     1		push	EDX
 000000B2  51		     1		push	ECX
 000000B3  50		     1		push	EAX
 000000B4  8B 55 10	     1		mov		EDX, [EBP + 16]
 000000B7  E8 00000000 E     1		call	WriteString
 000000BC  8B 55 0C	     1		mov		EDX, [EBP + 12]
 000000BF  B9 0000000B	     1		mov		ECX, MAX_USER_INPUT_SIZE
 000000C4  E8 00000000 E     1		call	ReadString
 000000C9  A3 00000146 R     1		mov		userInputLen, EAX
 000000CE  58		     1		pop		EAX
 000000CF  59		     1		pop		ECX
 000000D0  5A		     1		pop		EDX

 000000D1  50					push	EAX
 000000D2  8B 45 08				mov		EAX, [EBP + 8]			; set ECX as the count of userInput
 000000D5  8B 08				mov		ECX, [EAX]
 000000D7  58					pop		EAX
						;mov		ECX, EAX

 000000D8  8B 75 0C				mov		ESI, [EBP + 12]			; reset userInput mem location
						
 000000DB  BB 00000000				mov		EBX, 0
 000000E0  89 5D 18				mov		[EBP + 24], EBX			; reset negation variable


 000000E3				_checkSign:
 000000E3  AC					lodsb
 000000E4  3C 2D				cmp		AL, 45
 000000E6  74 02				je		_setNegativeFlag
 000000E8  EB 0F				jmp		_validate

 000000EA				_setNegativeFlag:
 000000EA  53					push	EBX
 000000EB  BB 00000001				mov		EBX, 1
 000000F0  89 5D 18				mov		[EBP + 24], EBX
 000000F3  5B					pop		EBX
 000000F4  49					dec		ECX


 000000F5				_moveForward:
 000000F5  FC					cld
 000000F6  AC					lodsb
 000000F7  EB 00				jmp		_validate

 000000F9				_validate:
 000000F9  3C 30				cmp		AL, 48
 000000FB  72 06				jb		_invalid
 000000FD  3C 39				cmp		AL, 57
 000000FF  77 02				ja		_invalid
 00000101  EB 19				jmp		_accumulate

 00000103				_invalid:
						mDisplayString		[EBP + 20]
 00000103  52		     1		push	EDX
 00000104  8B 55 14	     1		mov		EDX, [EBP + 20]
 00000107  E8 00000000 E     1		call	WriteString
 0000010C  5A		     1		pop		EDX
 0000010D  E8 00000000 E			call	Crlf
 00000112  59					pop		ECX					; restore ECX to outer loop count
 00000113  BB 00000000				mov		EBX, 0
 00000118  89 1F				mov		[EDI], EBX			; reset accumulated value in destination register
 0000011A  EB 94				jmp		_prompt
						
 0000011C				_accumulate:
 0000011C  8B 1F				mov		EBX, [EDI]			; save prev accumulated value

 0000011E  50					push	EAX					; preserve EAX/AL
 0000011F  53					push	EBX
 00000120  8B C3				mov		EAX, EBX			; 10 * (EAX <= EBX)
 00000122  BB 0000000A				mov		EBX, 10
 00000127  F7 E3				mul		EBX					; 0/ 1/ 10 in EAX
 00000129  89 07				mov		[EDI], EAX
 0000012B  5B					pop		EBX
 0000012C  58					pop		EAX

 0000012D  2C 30				sub		AL, LO_NUM_ASCII
 0000012F  00 07				add		[EDI], AL

						;add		EAX, EBX
						;mov		[EDI], EAX

 00000131  49					dec		ECX
 00000132  83 F9 00				cmp		ECX, 0
 00000135  77 BE				ja		_moveForward

 00000137  50					push	EAX
 00000138  8B 45 18				mov		EAX, [EBP + 24]
 0000013B  83 F8 01				cmp		EAX, 1
 0000013E  74 02				je		_negate
 00000140  EB 06				jmp		_continue

 00000142					_negate:
 00000142  8B 07					mov		EAX, [EDI]
 00000144  F7 D8					neg		EAX
 00000146  89 07					mov		[EDI], EAX
						
						

 00000148					_continue:
 00000148  58						pop		EAX
 00000149  83 C7 04					add		EDI, 4
 0000014C  59						pop		ECX
 0000014D  49						dec		ECX
 0000014E  83 F9 00					cmp		ECX, 0
 00000151  0F 85 FFFFFF59				jnz		_prompt
					
 00000157  5B				pop		EBX
 00000158  C2 001C			RET		28
 0000015B			ReadVal ENDP

 0000015B			WriteVal PROC
 0000015B  55				push	EBP
 0000015C  8B EC			mov		EBP, ESP

 0000015E  50				push	EAX
					;mov		ESI, [EBP + 8]			; int address
 0000015F  8B 7D 0C			mov		EDI, [EBP + 12]			; outString address
 00000162  8B 45 08			mov		EAX, [EBP + 8]
 00000165  51				push	ECX

 00000166				_checkSign:
 00000166  83 F8 00				cmp		EAX, 0
 00000169  7C 03				jl		_negate
 0000016B  EB 13				jmp		_pushNullBit
 0000016D  FC					cld


 0000016E				_negate:
 0000016E  50					push	EAX
 0000016F  B0 2D				mov		AL, 45
 00000171  AA					stosb	
						mDisplayString		[EBP + 12]
 00000172  52		     1		push	EDX
 00000173  8B 55 0C	     1		mov		EDX, [EBP + 12]
 00000176  E8 00000000 E     1		call	WriteString
 0000017B  5A		     1		pop		EDX

 0000017C  4F					dec		EDI
						
 0000017D  58					pop		EAX
 0000017E  F7 D8				neg		EAX			; convert to positive int

						;mov		AL, 48
						;stosb
						;mDisplayString		[EBP + 12]

 00000180				_pushNullBit:
 00000180  6A 00				push	0

 00000182				_asciiConversion:

 00000182  BA 00000000				mov		EDX, 0
 00000187  BB 0000000A				mov		EBX, 10
 0000018C  F7 F3				div		EBX
						
 0000018E  8B CA				mov		ECX, EDX
 00000190  83 C1 30				add		ECX, 48
 00000193  51					push	ECX
 00000194  83 F8 00				cmp		EAX, 0
 00000197  74 02				je		_popAndPrint
 00000199  EB E7				jmp		_asciiConversion

 0000019B				_popAndPrint:
 0000019B  58					pop		EAX

						;mov		AL, EAX
 0000019C  AA					stosb
						mDisplayString		[EBP + 12]
 0000019D  52		     1		push	EDX
 0000019E  8B 55 0C	     1		mov		EDX, [EBP + 12]
 000001A1  E8 00000000 E     1		call	WriteString
 000001A6  5A		     1		pop		EDX
 000001A7  4F					dec		EDI

 000001A8  83 F8 00				cmp		EAX, 0
 000001AB  74 02				je		_exitAsciiConversion
 000001AD  EB EC				jmp		_popAndPrint

 000001AF				_exitAsciiConversion:
 000001AF  B0 20				mov		AL, SPACE_ASCII
 000001B1  AA					stosb
						mDisplayString		[EBP + 12]
 000001B2  52		     1		push	EDX
 000001B3  8B 55 0C	     1		mov		EDX, [EBP + 12]
 000001B6  E8 00000000 E     1		call	WriteString
 000001BB  5A		     1		pop		EDX
 000001BC  4F					dec		EDI
						

 000001BD  59				pop		ECX
 000001BE  58				pop		EAX
 000001BF  5D				pop		EBP

 000001C0  C2 0008			RET	8
 000001C3			WriteVal ENDP

 000001C3			DisplayNumbers PROC
 000001C3  55				push	EBP
 000001C4  8B EC			mov		EBP, ESP

 000001C6  8B 75 08			mov		ESI, [EBP + 8]		; input array
 000001C9  8B 7D 0C			mov		EDI, [EBP + 12]		; outString
 000001CC  B9 0000000A			mov		ECX, MAX_USER_INPUT_SIZE - 1

 000001D1				_printNumber:
 000001D1  57					push	EDI
 000001D2  FF 36				push	[ESI]
 000001D4  E8 FFFFFF82				call	WriteVal
 000001D9  83 C6 04				add		ESI, 4
 000001DC  E2 F3				loop	_printNumber


 000001DE  5D				pop		EBP
 000001DF  C2 0008			RET		8
 000001E2			DisplayNumbers ENDP

 000001E2			DisplayAverage PROC
 000001E2  55				push	EBP
 000001E3  8B EC			mov		EBP, ESP

 000001E5  8B 75 08			mov		ESI, [EBP + 8]		; input array
 000001E8  8B 7D 0C			mov		EDI, [EBP + 12]		; outString
 000001EB  B9 0000000A			mov		ECX, MAX_USER_INPUT_SIZE - 1

 000001F0  B8 00000000			mov		EAX, 0

 000001F5				_sumNumbers:
 000001F5  03 06				add		EAX, [ESI]
 000001F7  83 C6 04				add		ESI, 4
 000001FA  E2 F9				loop	_sumNumbers

					;push	EAX

					mDisplayString [EBP + 16]
 000001FC  52		     1		push	EDX
 000001FD  8B 55 10	     1		mov		EDX, [EBP + 16]
 00000200  E8 00000000 E     1		call	WriteString
 00000205  5A		     1		pop		EDX

 00000206  57				push	EDI
 00000207  50				push	EAX
 00000208  E8 FFFFFF4E			call	WriteVal

 0000020D  E8 00000000 E		call	Crlf

					;pop		EAX

 00000212				_divide:
 00000212  BB 0000000A				mov		EBX, MAX_USER_INPUT_SIZE - 1
 00000217  BA 00000000				mov		EDX, 0
 0000021C  99					cdq
 0000021D  F7 FB				idiv	EBX

					mDisplayString [EBP + 20]
 0000021F  52		     1		push	EDX
 00000220  8B 55 14	     1		mov		EDX, [EBP + 20]
 00000223  E8 00000000 E     1		call	WriteString
 00000228  5A		     1		pop		EDX

 00000229  57				push	EDI
 0000022A  50				push	EAX
 0000022B  E8 FFFFFF2B			call	WriteVal

 00000230  E8 00000000 E		call	Crlf

 00000235  5D				pop		EBP
 00000236  C2 0008			RET		8
 00000239			DisplayAverage ENDP

				END main
Microsoft (R) Macro Assembler Version 14.28.29914.0	    06/06/21 01:18:44
#Program Template     (template.asm			     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000001D5 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000239 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DisplayAverage . . . . . . . . .	P Near	 000001E2 _TEXT	Length= 00000057 Public STDCALL
  _sumNumbers  . . . . . . . . .	L Near	 000001F5 _TEXT	
  _divide  . . . . . . . . . . .	L Near	 00000212 _TEXT	
DisplayNumbers . . . . . . . . .	P Near	 000001C3 _TEXT	Length= 0000001F Public STDCALL
  _printNumber . . . . . . . . .	L Near	 000001D1 _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 000000A5 _TEXT	Length= 000000B6 Public STDCALL
  _prompt  . . . . . . . . . . .	L Near	 000000B0 _TEXT	
  _checkSign . . . . . . . . . .	L Near	 000000E3 _TEXT	
  _setNegativeFlag . . . . . . .	L Near	 000000EA _TEXT	
  _moveForward . . . . . . . . .	L Near	 000000F5 _TEXT	
  _validate  . . . . . . . . . .	L Near	 000000F9 _TEXT	
  _invalid . . . . . . . . . . .	L Near	 00000103 _TEXT	
  _accumulate  . . . . . . . . .	L Near	 0000011C _TEXT	
  _negate  . . . . . . . . . . .	L Near	 00000142 _TEXT	
  _continue  . . . . . . . . . .	L Near	 00000148 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 0000015B _TEXT	Length= 00000068 Public STDCALL
  _checkSign . . . . . . . . . .	L Near	 00000166 _TEXT	
  _negate  . . . . . . . . . . .	L Near	 0000016E _TEXT	
  _pushNullBit . . . . . . . . .	L Near	 00000180 _TEXT	
  _asciiConversion . . . . . . .	L Near	 00000182 _TEXT	
  _popAndPrint . . . . . . . . .	L Near	 0000019B _TEXT	
  _exitAsciiConversion . . . . .	L Near	 000001AF _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000A5 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI_NUM_ASCII . . . . . . . . . .	Number	 00000039h   
HI . . . . . . . . . . . . . . .	Number	 7FFFFFFFh   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO_NUM_ASCII . . . . . . . . . .	Number	 00000030h   
LO . . . . . . . . . . . . . . .	Number	 -80000000h   
MAX_USER_INPUT_SIZE  . . . . . .	Number	 0000000Bh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NEG_ASCII  . . . . . . . . . . .	Number	 0000002Dh   
NULL_BIT . . . . . . . . . . . .	Number	 00000000h   
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
POS_ASCII  . . . . . . . . . . .	Number	 0000002Bh   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
SPACE_ASCII  . . . . . . . . . .	Number	 00000020h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
avgDisplayMsg  . . . . . . . . .	Byte	 00000121 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
errorMsg . . . . . . . . . . . .	Byte	 00000176 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodByeMsg . . . . . . . . . . .	Byte	 00000132 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro1 . . . . . . . . . . . . .	Byte	 00000000 _DATA	
intro2 . . . . . . . . . . . . .	Byte	 00000039 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
numbersEnteredMsg  . . . . . . .	Byte	 000000F3 _DATA	
outString  . . . . . . . . . . .	Byte	 000001D4 _DATA	
prompt . . . . . . . . . . . . .	Byte	 000000D3 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
setNegative  . . . . . . . . . .	DWord	 000001A4 _DATA	
sumDisplayMsg  . . . . . . . . .	Byte	 00000110 _DATA	
testArr  . . . . . . . . . . . .	DWord	 000001AC _DATA	
testInt  . . . . . . . . . . . .	DWord	 000001A8 _DATA	
userInputLen . . . . . . . . . .	DWord	 00000146 _DATA	
userInput  . . . . . . . . . . .	Byte	 0000013B _DATA	
userNums . . . . . . . . . . . .	DWord	 0000014E _DATA	
userNum  . . . . . . . . . . . .	DWord	 0000014A _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
